"Contains code related to the Cortecs programming language"
module(name = "cortecs", version = "2024.10.04")

git_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:git.bzl", "git_repository")
http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
bazel_dep(name = "rules_cc", version = "0.0.9")

# Dependencies are auto updated by a github action that
# * scans for lines that start with git_repository( or git_override(
# * inside it looks for:
#   * name/module_name
#   * remote
#   * branch
#     * this conflicts with commit in git_repository and isnt valid in git_override
#     * this line should be commented out
#   * commit
#     * due to a bit of laziness this must come last
# * checks the remote for the commit at the tip of the branch
# * if they're different, it submits a new PR for each individual dependency that needs updating

# Make sure the 4 attributes are at the top of the declaration/ahead of build_file_content.
# due to a bit of laziness in the script, the error checking only looks for build_file_content or )
# to determine end of declaration.

bazel_dep(name = "flecs")
git_override(
    module_name = "flecs",
    remote = "https://github.com/SanderMertens/flecs.git",
    # branch = "master",
    commit = "386acc521ddc904bc647b7bd18c3151ac4d53bd8",
)

git_repository(
    name = "unity",
    remote = "https://github.com/ThrowTheSwitch/Unity.git",
    # branch = "master",
    commit = "73237c5d224169c7b4d2ec8321f9ac92e8071708",
    build_file_content = """
cc_library(
    name = "unity",
    srcs = glob(["src/*.c"]),
    hdrs = glob(["src/*.h"]),
    features = ["treat_warnings_as_errors"],
    includes = ["src/"],
    visibility = ["//visibility:public"],
)
""",
)

git_repository(
    name = "cJSON",
    remote = "https://github.com/DaveGamble/cJSON.git",
    # branch = "master",
    commit = "12c4bf1986c288950a3d06da757109a6aa1ece38",
    build_file_content = """
cc_library(
    name = "cJSON",
    srcs = ["cJSON.c"],
    hdrs = ["cJSON.h"],
    features = ["treat_warnings_as_errors"],
    includes = ["."],
    visibility = ["//visibility:public"],
)
""",
)

# Usage:
# bazel build //...
# bazel run @hedron_compile_commands//:refresh_all
# Sometimes helpful to clear the bazel cache:
# bazel clean
# rm -r $(bazel info repository_cache)
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    # branch = "main",
    commit = "1e08f8e0507b6b6b1f4416a9a22cf5c28beaba93",
)

http_archive(
    name = "icu",
    # BUILD files inside icu4c reference //icu4c/ but it unzips into icu/
    # Configure to replace the folder icu/ with icu4c/
    strip_prefix = "icu",
    add_prefix = "icu4c",
    integrity = "sha256-kw832xpCPD25SC/ceTIkfpp//WMwiVv/QZd/4q+Piho=",
    urls = ["https://github.com/unicode-org/icu/releases/download/release-75-1/icu4c-75_1-src.zip"],
)
