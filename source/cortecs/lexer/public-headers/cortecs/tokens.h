#ifndef CORTECS_LEXER_TOKENS_H
#define CORTECS_LEXER_TOKENS_H

#include <cortecs/span.h>
#include <cortecs/string.h>
#include <unicode/uchar.h>

typedef enum {
    CORTECS_LEXER_TAG_NAME,
    CORTECS_LEXER_TAG_TYPE,
    CORTECS_LEXER_TAG_INT,
    CORTECS_LEXER_TAG_BAD_INT,
    CORTECS_LEXER_TAG_FLOAT,
    CORTECS_LEXER_TAG_BAD_FLOAT,

    CORTECS_LEXER_TAG_OPERATOR,

    CORTECS_LEXER_TAG_SPACE,
    CORTECS_LEXER_TAG_NEW_LINE,

    CORTECS_LEXER_TAG_FUNCTION,
    CORTECS_LEXER_TAG_LET,
    CORTECS_LEXER_TAG_RETURN,
    CORTECS_LEXER_TAG_IF,

    CORTECS_LEXER_TAG_DOT,

    CORTECS_LEXER_TAG_OPEN_PAREN,
    CORTECS_LEXER_TAG_CLOSE_PAREN,
    CORTECS_LEXER_TAG_OPEN_CURLY,
    CORTECS_LEXER_TAG_CLOSE_CURLY,
    CORTECS_LEXER_TAG_OPEN_SQUARE,
    CORTECS_LEXER_TAG_CLOSE_SQUARE,

    CORTECS_LEXER_TAG_SINGLE_QUOTE,
    CORTECS_LEXER_TAG_DOUBLE_QUOTE,
    CORTECS_LEXER_TAG_BACK_QUOTE,

    CORTECS_LEXER_TAG_COMMA,
    CORTECS_LEXER_TAG_COLON,
    CORTECS_LEXER_TAG_SEMICOLON,

    CORTECS_LEXER_TAG_INVALID,
} cortecs_lexer_tag_t;

typedef struct {
    cortecs_lexer_tag_t tag;
    cortecs_span_t span;
    CN(Cortecs, String) text;
} cortecs_lexer_token_t;

const char *cortecs_lexer_tag_to_string(cortecs_lexer_tag_t tag);

#endif